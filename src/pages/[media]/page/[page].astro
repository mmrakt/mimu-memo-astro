---
import type { Page, PaginateFunction } from 'astro'
import { MEDIA_TYPE_LIST } from '../../../config'
import {
  extractSlugFromMd,
  makeNotePosts,
  makeQiitaPosts,
  makeZennPosts,
} from '../../../utils'
import type { Frontmatter, MediaType } from '../../../types'
import BaseLayout from '../../../components/layouts/BaseLayout.astro'
import Container from '../../../features/postList/Container.astro'
import Head from '../../../components/layouts/Head.astro'

export const prerender = true

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const ownedMd = await Astro.glob<Frontmatter>('../../../content/owned/*.md'),
    qiitaPosts = await makeQiitaPosts(),
    zennPosts = await makeZennPosts(),
    notePosts = await makeNotePosts()
  const ownedPosts: Frontmatter[] = ownedMd.map((post) => {
    return {
      pubDate: post.frontmatter.pubDate,
      title: post.frontmatter.title,
      link: extractSlugFromMd(post),
      media: 'owned',
    }
  })

  const paginatePosts = (posts: Frontmatter[], media: MediaType) =>
    paginate(posts, {
      params: { media },
      pageSize: 10,
    })

  return MEDIA_TYPE_LIST.map((media) => {
    switch (media) {
      case 'owned':
        return paginatePosts(ownedPosts, media)
      case 'qiita':
        return paginatePosts(qiitaPosts, media)
      case 'zenn':
        return paginatePosts(zennPosts, media)
      case 'note':
        return paginatePosts(notePosts, media)
    }
  }).flat()
}
type Props = {
  page: Page<Frontmatter>
}
type Params = {
  media: MediaType
}
const { page } = Astro.props as Props
const { media } = Astro.params as Params
---

<html lang="ja">
  <Head pagePath={`/${media}/page/${page.currentPage}`} pageType="blog" />
  <BaseLayout hasSideBar={true} hasToc={false}>
    <Container page={page} media={media} />
  </BaseLayout>
</html>
